%# Copyright (C) 2013-2016 Jacopo Corno <jacopo.corno@gmail.com>
%# Copyright (C) 2013-2016 Roberto Porcu' <roberto.porcu@polimi.it>
%#
%# This file is part of Octave.
%#
%# Octave is free software; you can redistribute it and/or modify it
%# under the terms of the GNU General Public License as published by
%# the Free Software Foundation; either version 3 of the License, or (at
%# your option) any later version.
%#
%# Octave is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with Octave; see the file COPYING.  If not, see
%# <http://www.gnu.org/licenses/>.

%# -*- texinfo -*-
%# @deftypefn  {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23s (@var{f}, @var{t}, @var{x}, @var{dt})
%# @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23s (@var{f}, @var{t}, @var{x}, @var{dt}, @var{options})
%# @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23s (@var{f}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in})
%# @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23s (@var{f}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in}, @var{t_next})
%# @deftypefnx {} {[@var{t_next}, @var{x_next}, @var{x_est}] =} runge_kutta_23s (@dots{})
%# @deftypefnx {} {[@var{t_next}, @var{x_next}, @var{x_est}, @var{k_vals_out}] =} runge_kutta_23s (@dots{})
%#
%# This function can be used to integrate a system of ODEs with a given initial
%# condition @var{x} from @var{t} to @var{t+dt}, with a Rosenbrock method of
%# order (2,3).  All the mathematical formulas are from "The MATLAB ode suite",
%# L.F. Shampine, options.Mass.W. Reichelt, pp.6-71.
%#
%# @var{f} is a function handle that defines the ODE: @code{y' = f(tau,y)}.
%# The function must accept two inputs where the first is time @var{tau} and
%# the second is a column vector of unknowns @var{y}.
%#
%# @var{t} is the first extreme of integration interval.
%#
%# @var{x} is the initial condition of the system..
%#
%# @var{dt} is the timestep, that is the length of the integration interval.
%#
%# The optional fourth argument @var{options} specifies options for the ODE
%# solver.  It is a structure generated by @code{odeset}.  In particular it
%# contains the field @var{funarguments} with the optional arguments to be used
%# in the evaluation of @var{f}.
%#
%# The optional fifth argument @var{k_vals_in} contains the Runge-Kutta
%# evaluations of the previous step to use in a FSAL scheme.
%#
%# The optional sixth argument @var{t_next} (@code{t_next = t + dt}) specifies
%# the end of the integration interval.  The output @var{x_next} s the higher
%# order computed solution at time @var{t_next} (local extrapolation is
%# performed).
%#
%# Optionally the functions can also return @var{x_est}, a lower order solution
%# for the estimation of the error, and @var{k_vals_out}, a matrix containing
%# the Runge-Kutta evaluations to use in a FSAL scheme or for dense output.
%#
%# @seealso{runge_kutta_23}
%# @end deftypefn

function [t_next, x_next, x_est, k] = runge_kutta_23s (f, t, x, dt,
                                                                options = [],
                                                                k_vals = [],
                                                                t_next = t + dt)

  if (! isempty (options))  # extra arguments for function evaluator
    args = options.funarguments;
  else
    args = {};
  end
  
  persistent d = 1 / (2 + sqrt (2));
  persistent a = 1 / 2;
  persistent e32 = 6 + sqrt (2);

  jacfun = false;
  jacmat = false;
  if (! isempty (options.Jacobian))
    if (ischar (options.Jacobian))
      jacfun = true;
      jac = str2fun (options.Jacobian);
    elseif (is_function_handle (options.Jacobian))
      jacfun = true;
      jac = options.Jacobian;
    elseif (ismatrix (options.Jacobian))
      jacmat = true;
      jac = options.Jacobian;
    else
      error ("ode23s: the jacobian should be passed as a matrix, a string or a function handle")
    end
  end

  jacpat = false;
  if (! isempty (options.JPattern))
    jacpat = true;
    [ii, jj] = options.Jacobian;
    pattern = sparse (ii, jj, true);
  end

  %# Jacobian matrix, dfxpdp
  if (jacmat)
    J = jac;
  elseif (jacfun)
    J = jac (t, x);
  elseif (! jacpat)
    J = __dfxpdp__ (x, @(a) feval (f, t, a, args{:}), options.RelTol);
  elseif (jacpat)
    J = __dfxpdp__ (x, @(a) feval (f, t, a, args{:}), options.RelTol, pattern);
  end

  T = (feval (f, t + .1 * dt, x) - feval (f, t, x, args{:})) / (.1 * dt);

  %# Wolfbrandt coefficient
  if (isempty (options.Mass))
    M = speye (length (x));
  else
    M = options.Mass;
  end
  W = M - dt*d*J;
  
  if issparse (W)
    [Lw, Uw, Pw, Qw, Rw] = lu  (W);
  else
    [Lw, Uw, Pw] = lu (W);
  end

  %# compute the slopes
  F(:,1) = feval (f, t, x, args{:});
  if issparse (W)
    k(:,1) = Qw * (Uw \ (Lw \ (Pw * (Rw \ (F(:,1) + dt*d*T)))));
  else
    k(:,1) = Uw \ (Lw \ (Pw * (F(:,1) + dt*d*T)));
  end
  F(:,2) = feval (f, t+a*dt, x+a*dt*k(:,1), args{:});
  if issparse (W)
    k(:,2) = Uw * (Uw \ (Lw \ (Pw * (Rw \ (F(:,2) - M*k(:,1)))))) + k(:,1);
  else
    k(:,2) = Uw \ (Lw \ (Pw * (F(:,2) - M*k(:,1)))) + k(:,1);
  end

  %# compute the 2nd order estimate
  x_next = x + dt*k(:,2);

  if (nargout >= 3)
    %# 3rd order, needed in error forumula
    F(:,3) = feval (f, t+dt, x_next, args{:});
    if issparse (W)
      k(:,3) = Qw * (Uw \ (Lw \ (Pw * (Rw \ (F(:,3) - e32 * (M*k(:,2) - F(:,2)) - 2 * (M*k(:,1) - F(:,1)) + dt*d*T)))));
    else
      k(:,3) = Uw \ (Lw \ (Pw * (F(:,3) - e32 * (M*k(:,2) - F(:,2)) - 2 * (M*k(:,1) - F(:,1)) + dt*d*T)));
    end

    %# estimate the error
    err_est = (dt/6) * (k(:,1) - 2*k(:,2) + k(:,3));

    %# FIXME: to use in AbsRel_Norm function I need x_est and not err directly
    x_est = x_next + err_est;
  end

end

