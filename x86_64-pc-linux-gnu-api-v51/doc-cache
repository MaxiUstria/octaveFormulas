# doc-cache created by Octave 4.2.2
# name: cache
# type: cell
# rows: 3
# columns: 7
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
ode2r


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2344
 -- Command: [] = ode2r (FUN, TRANGE, INIT, [ODE_OPT], [PAR1, PAR2,
          ...])
 -- Command: [SOL] = ode2r (FUN, TRANGE, INIT, [ODE_OPT], [PAR1, PAR2,
          ...])
 -- Command: [T, Y, [XE, YE, IE]] = ode2r (FUN, TRANGE, INIT, [ODE_OPT],
          [PAR1, PAR2, ...])

     This function file can be used to solve a set of stiff ordinary
     differential equations (ODEs) and stiff differential algebraic
     equations (DAEs).  This function file is a wrapper to Hairer's and
     Wanner's Fortran solver 'radau.f'.

     FUN is a function handle, inline function, or string containing the
     name of the function that defines the ODE: 'y' = f(t,y)'.  The
     function must accept two inputs where the first is time T and the
     second is a column vector of unknowns Y.

     TRANGE specifies the time interval over which the ODE will be
     evaluated, Y0 contains the initial values of the states.

     The optional fourth argument ODE_OPT specifies non-default options
     to the ODE solver.  It is a structure generated by 'odeset'.

     If this function is called with no return argument then it plots
     the solution over time in a figure window while solving the set of
     IDEs that are defined in a function and specified by the function
     handle FUN.

     The function typically returns two outputs.  Variable T is a column
     vector and contains the times where the solution was computed.  The
     output Y is a matrix in which each column refers to a different
     unknown of the problem and each row corresponds to a time in T.  If
     TRANGE specifies intermediate time steps, only those will be
     returned.

     The output can also be returned as a structure SOLUTION which has a
     field X containing a row vector of times where the solution was
     evaluated and a field Y containing the solution matrix such that
     each column corresponds to a time in X.

     For example,
          function y = odepkg_equations_lorenz (t, x)
            y = [10 * (x(2) - x(1));
                 x(1) * (28 - x(3));
                 x(1) * x(2) - 8/3 * x(3)];
          endfunction

          vopt = odeset ("InitialStep", 1e-3, "MaxStep", 1e-1, \
                         "OutputFcn", @odephas3, "Refine", 5);
          ode2r (@odepkg_equations_lorenz, [0, 25], [3 15 1], vopt);

     See also: odepkg.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function file can be used to solve a set of stiff ordinary
differential equ



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
ode5r


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2691
 -- Command: [] = ode5r (FUN, TRANGE, INIT, [ODE_OPT], [PAR1, PAR2,
          ...])
 -- Command: [SOL] = ode5r (FUN, TRANGE, INIT, [ODE_OPT], [PAR1, PAR2,
          ...])
 -- Command: [T, Y, [XE, YE, IE]] = ode5r (FUN, TRANGE, INIT, [ODE_OPT],
          [PAR1, PAR2, ...])

     This function file can be used to solve a set of stiff ordinary
     differential equations (ODEs) and stiff differential algebraic
     equations (DAEs).  'ode5r' is a wrapper to Hairer's and Wanner's
     Fortran solver 'radau5.f'.  The method is based on the 3-stage
     Radau collocation method.  It solves DAEs of the form 'Mx' =
     f(t,y)', where 'M' is a constant, square matrix which may be
     singular.  The code is applicable to problems of index 1,2,3.  The
     higher-index variables must be identified by the user.

     FUN is a function handle, inline function, or string containing the
     name of the function that defines the ODE: 'y' = f(t,y)'.  The
     function must accept two inputs where the first is time T and the
     second is a column vector of unknowns Y.

     TRANGE specifies the time interval over which the ODE will be
     evaluated, Y0 contains the initial values of the states, DY0
     contains the initial values of the derivatives.

     The optional fourth argument ODE_OPT specifies non-default options
     to the ODE solver.  It is a structure generated by 'odeset'.

     If this function is called with no return argument then it plots
     the solution over time in a figure window while solving the set of
     IDEs that are defined in a function and specified by the function
     handle FUN.

     The function typically returns two outputs.  Variable T is a column
     vector and contains the times where the solution was computed.  The
     output Y is a matrix in which each column refers to a different
     unknown of the problem and each row corresponds to a time in T.  If
     TRANGE specifies intermediate time steps, only those will be
     returned.

     The output can also be returned as a structure SOLUTION which has a
     field X containing a row vector of times where the solution was
     evaluated and a field Y containing the solution matrix such that
     each column corresponds to a time in X.

     For example,
          function y = odepkg_equations_lorenz (t, x)
            y = [10 * (x(2) - x(1));
                 x(1) * (28 - x(3));
                 x(1) * x(2) - 8/3 * x(3)];
          endfunction

          vopt = odeset ("InitialStep", 1e-3, "MaxStep", 1e-1, \
                         "OutputFcn", @odephas3, "Refine", 5);
          ode5r (@odepkg_equations_lorenz, [0, 25], [3 15 1], vopt);

     See also: odepkg.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function file can be used to solve a set of stiff ordinary
differential equ



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
odebda


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2405
 -- Command: [] = odebda (FUN, TRANGE, INIT, [ODE_OPT], [PAR1, PAR2,
          ...])
 -- Command: [SOL] = odebda (FUN, TRANGE, INIT, [ODE_OPT], [PAR1, PAR2,
          ...])
 -- Command: [T, Y, [XE, YE, IE]] = odebda (FUN, TRANGE, INIT,
          [ODE_OPT], [PAR1, PAR2, ...])

     This function file can be used to solve a set of stiff ordinary
     differential equations (ODEs) and stiff differential algebraic
     equations (DAEs).  'odebda' is a wrapper file that uses Jeff Cash's
     Fortran solver 'mebdfdae.f'.  It uses an extended backward
     differentiation formula.

     FUN is a function handle, inline function, or string containing the
     name of the function that defines the ODE: 'y' = f(t,y)'.  The
     function must accept two inputs where the first is time T and the
     second is a column vector of unknowns Y.

     TRANGE specifies the time interval over which the ODE will be
     evaluated, INIT contains the initial values of the states.

     The optional fourth argument ODE_OPT specifies non-default options
     to the ODE solver.  It is a structure generated by 'odeset'.

     If this function is called with no return argument then it plots
     the solution over time in a figure window while solving the set of
     IDEs that are defined in a function and specified by the function
     handle FUN.

     The function typically returns two outputs.  Variable T is a column
     vector and contains the times where the solution was computed.  The
     output Y is a matrix in which each column refers to a different
     unknown of the problem and each row corresponds to a time in T.  If
     TRANGE specifies intermediate time steps, only those will be
     returned.

     The output can also be returned as a structure SOLUTION which has a
     field X containing a row vector of times where the solution was
     evaluated and a field Y containing the solution matrix such that
     each column corresponds to a time in X.

     For example,
          function y = odepkg_equations_lorenz (t, x)
            y = [10 * (x(2) - x(1));
                 x(1) * (28 - x(3));
                 x(1) * x(2) - 8/3 * x(3)];
          endfunction

          vopt = odeset ("InitialStep", 1e-3, "MaxStep", 1e-1, \
                         "OutputFcn", @odephas3, "Refine", 5);
          odebda (@odepkg_equations_lorenz, [0, 25], [3 15 1], vopt);

     See also: odepkg.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function file can be used to solve a set of stiff ordinary
differential equ



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
odebdi


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2418
 -- Command: [] = odebdi (FUN, TRANGE, Y0, DY0, [ODE_OPT], [P1, P2,
          ...])
 -- Command: [SOL] = odebdi (FUN, TRANGE, Y0, DY0, [ODE_OPT], [P1, P2,
          ...])
 -- Command: [T, Y, [XE, YE, IE]] = odebdi (FUN, TRANGE, Y0, DY0,
          [ODE_OPT], [P1, P2, ...])

     This function file can be used to solve a set of stiff implicit
     differential equations (IDEs).  'odekdi' is a wrapper file that
     uses Jeff Cash's Fortran solver 'mebdfi.f'.

     FUN is a function handle, inline function, or string containing the
     name of the function that defines the ODE: 'y' = f(t,y)'.  The
     function must accept two inputs where the first is time T and the
     second is a column vector of unknowns Y.

     TRANGE specifies the time interval over which the ODE will be
     evaluated, Y0 contains the initial values of the states, DY0
     contains the initial values of the derivatives.

     The optional fourth argument ODE_OPT specifies non-default options
     to the ODE solver.  It is a structure generated by 'odeset'.

     If this function is called with no return argument then it plots
     the solution over time in a figure window while solving the set of
     IDEs that are defined in a function and specified by the function
     handle FUN.

     The function typically returns two outputs.  Variable T is a column
     vector and contains the times where the solution was computed.  The
     output Y is a matrix in which each column refers to a different
     unknown of the problem and each row corresponds to a time in T.  If
     TRANGE specifies intermediate time steps, only those will be
     returned.

     The output can also be returned as a structure SOLUTION which has a
     field X containing a row vector of times where the solution was
     evaluated and a field Y containing the solution matrix such that
     each column corresponds to a time in X.

     For example,
          function res = odepkg_equations_ilorenz (t, y, yd)
            res = [10 * (y(2) - y(1)) - yd(1);
                   y(1) * (28 - y(3)) - yd(2);
                   y(1) * y(2) - 8/3 * y(3) - yd(3)];
          endfunction

          vopt = odeset ("InitialStep", 1e-3, "MaxStep", 1e-1, \
                         "OutputFcn", @odephas3, "Refine", 5);
          odebdi (@odepkg_equations_ilorenz, [0, 25], [3 15 1], \
                  [120 81 42.333333], vopt);

     See also: odekdi.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function file can be used to solve a set of stiff implicit
differential equ



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
odekdi


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2501
 -- Command: [] = odekdi (FUN, TRANGE, Y0, DY0, [ODE_OPT], [P1, P2,
          ...])
 -- Command: [SOL] = odekdi (FUN, TRANGE, Y0, DY0, [ODE_OPT], [P1, P2,
          ...])
 -- Command: [T, Y, [XE, YE, IE]] = odekdi (FUN, TRANGE, Y0, DY0,
          [ODE_OPT], [P1, P2, ...])

     This function file can be used to solve a set of stiff implicit
     differential equations (IDEs).  'odekdi' is a wrapper file that
     uses the direct method (not the Krylov method) of Petzold's,
     Brown's, Hindmarsh's and Ulrich's Fortran solver 'ddaskr.f'.

     FUN is a function handle, inline function, or string containing the
     name of the function that defines the ODE: 'y' = f(t,y)'.  The
     function must accept two inputs where the first is time T and the
     second is a column vector of unknowns Y.

     TRANGE specifies the time interval over which the ODE will be
     evaluated, Y0 contains the initial values of the states, DY0
     contains the initial values of the derivatives.

     The optional fourth argument ODE_OPT specifies non-default options
     to the ODE solver.  It is a structure generated by 'odeset'.

     If this function is called with no return argument then it plots
     the solution over time in a figure window while solving the set of
     IDEs that are defined in a function and specified by the function
     handle FUN.

     The function typically returns two outputs.  Variable T is a column
     vector and contains the times where the solution was computed.  The
     output Y is a matrix in which each column refers to a different
     unknown of the problem and each row corresponds to a time in T.  If
     TRANGE specifies intermediate time steps, only those will be
     returned.

     The output can also be returned as a structure SOLUTION which has a
     field X containing a row vector of times where the solution was
     evaluated and a field Y containing the solution matrix such that
     each column corresponds to a time in X.

     For example,
          function res = odepkg_equations_ilorenz (t, y, yd)
            res = [10 * (y(2) - y(1)) - yd(1);
                   y(1) * (28 - y(3)) - yd(2);
                   y(1) * y(2) - 8/3 * y(3) - yd(3)];
          endfunction

          vopt = odeset ("InitialStep", 1e-3, "MaxStep", 1e-1, \
                         "OutputFcn", @odephas3, "Refine", 5);
          odekdi (@odepkg_equations_ilorenz, [0, 25], [3 15 1], \
                  [120 81 42.333333], vopt);

     See also: odebdi.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function file can be used to solve a set of stiff implicit
differential equ



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
oders


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2471
 -- Loadable Function: [] = oders (FUN, TRANGE, INIT, [ODE_OPT], [PAR1,
          PAR2, ...])
 -- Command: [SOL] = oders (FUN, TRANGE, INIT, [ODE_OPT], [PAR1, PAR2,
          ...])
 -- Command: [T, Y, [XE, YE, IE]] = oders (FUN, TRANGE, INIT, [ODE_OPT],
          [PAR1, PAR2, ...])

     This function file can be used to solve a set of stiff ordinary
     differential equations (ODEs) and stiff differential algebraic
     equations (DAEs).  This function file is a wrapper to Hairer's and
     Wanner's Fortran solver 'rodas.f'.  The algorithm uses a Rosenbrock
     method of order 4(3).

     FUN is a function handle, inline function, or string containing the
     name of the function that defines the ODE: 'y' = f(t,y)'.  The
     function must accept two inputs where the first is time T and the
     second is a column vector of unknowns Y.

     TRANGE specifies the time interval over which the ODE will be
     evaluated, Y0 contains the initial values of the states, DY0
     contains the initial values of the derivatives.

     The optional fourth argument ODE_OPT specifies non-default options
     to the ODE solver.  It is a structure generated by 'odeset'.

     If this function is called with no return argument then it plots
     the solution over time in a figure window while solving the set of
     IDEs that are defined in a function and specified by the function
     handle FUN.

     The function typically returns two outputs.  Variable T is a column
     vector and contains the times where the solution was computed.  The
     output Y is a matrix in which each column refers to a different
     unknown of the problem and each row corresponds to a time in T.  If
     TRANGE specifies intermediate time steps, only those will be
     returned.

     The output can also be returned as a structure SOLUTION which has a
     field X containing a row vector of times where the solution was
     evaluated and a field Y containing the solution matrix such that
     each column corresponds to a time in X.

     For example,
          function y = odepkg_equations_lorenz (t, x)
            y = [10 * (x(2) - x(1));
                 x(1) * (28 - x(3));
                 x(1) * x(2) - 8/3 * x(3)];
          endfunction

          vopt = odeset ("InitialStep", 1e-3, "MaxStep", 1e-1, \
                         "OutputFcn", @odephas3, "Refine", 5);
          oders (@odepkg_equations_lorenz, [0, 25], [3 15 1], vopt);

     See also: odepkg.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function file can be used to solve a set of stiff ordinary
differential equ



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
odesx


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2450
 -- Command: [] = odesx (@FUN, SLOT, INIT, [OPT], [PAR1, PAR2, ...])
 -- Command: [SOL] = odesx (@FUN, SLOT, INIT, [OPT], [PAR1, PAR2, ...])
 -- Command: [T, Y, [XE, YE, IE]] = odesx (@FUN, SLOT, INIT, [OPT],
          [PAR1, PAR2, ...])

     This function file can be used to solve a set of stiff ordinary
     differential equations (ODEs) and stiff differential algebraic
     equations (DAEs).  This function file is a wrapper to Hairer's and
     Wanner's Fortran solver 'seulex.f'.  Extrapolation method based on
     linearly implicit Euler for problems of the form 'My' = f(t,y)'
     with possibly singular matrix 'M'.

     FUN is a function handle, inline function, or string containing the
     name of the function that defines the ODE: 'y' = f(t,y)'.  The
     function must accept two inputs where the first is time T and the
     second is a column vector of unknowns Y.

     TRANGE specifies the time interval over which the ODE will be
     evaluated, Y0 contains the initial values of the states.

     The optional fourth argument ODE_OPT specifies non-default options
     to the ODE solver.  It is a structure generated by 'odeset'.

     If this function is called with no return argument then it plots
     the solution over time in a figure window while solving the set of
     IDEs that are defined in a function and specified by the function
     handle FUN.

     The function typically returns two outputs.  Variable T is a column
     vector and contains the times where the solution was computed.  The
     output Y is a matrix in which each column refers to a different
     unknown of the problem and each row corresponds to a time in T.  If
     TRANGE specifies intermediate time steps, only those will be
     returned.

     The output can also be returned as a structure SOLUTION which has a
     field X containing a row vector of times where the solution was
     evaluated and a field Y containing the solution matrix such that
     each column corresponds to a time in X.

     For example,
          function y = odepkg_equations_lorenz (t, x)
            y = [10 * (x(2) - x(1));
                 x(1) * (28 - x(3));
                 x(1) * x(2) - 8/3 * x(3)];
          endfunction

          vopt = odeset ("InitialStep", 1e-3, "MaxStep", 1e-1, \
                         "OutputFcn", @odephas3, "Refine", 5);
          odesx (@odepkg_equations_lorenz, [0, 25], [3 15 1], vopt);

     See also: odepkg.


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function file can be used to solve a set of stiff ordinary
differential equ





